<sect1 id="schema-caching">
  <title>Schema Caching</title>
  <para> 
   <emphasis>How can an application that relies on loading remote vocabularies be more tolerant of network failures and/or reduce use of bandwidth</emphasis>
  </para>

  <sect2><title>Context</title>
  <para>Linked Data applications will typically need to discover and load schemas from the web, e.g. to discover labels for properties and types, or to pass to a reasoner for infering additional data and relationships. Some vocabularies may be very commonly used, e.g. the RDF, RDF Schema and OWL vocabularies, while others may only be encountered during run-time.</para>
  </sect2>

  <sect2><title>Solution</title>
  <para>Build a local cache of useful schemas</para>
  </sect2>

  <sect2><title>Discussion</title>
  <para>Retrieving vocabularies from the web, like any other network access, is prone to failure so applications should be ready to handle failures. Repeated fetching of vocabularies can also reduce network usage on the client and free up resources on the server.</para>
  <para>With sufficient permissions, an applications can cache any vocabularies loaded from the web on the local system. Efficient use of HTTP requests can ensure that cached versions are only replaced when the remote copy of the vocabulary has been updated. Certain vocabularies, e.g. RDF Schema, will only change rarely, if at all. These could be cached for longer periods, if not permanently. Desktop applications may ship with a pre-seeded cache of common schemas.</para>
  <para>Ideally applications should provide configuration to support the location in which cached files are written, and the amount of cached data that will be stored. There may be benefits for desktop applications to be able to share cached vocabularies.</para>
  </sect2>

  <sect2><title>Related</title>
  <itemizedlist>
  <listitem><link linkend="x">X</link></listitem>
  </itemizedlist>
  </sect2>

  <sect2><title>Further Reading</title>
  <itemizedlist>
  <listitem><ulink linkend="x"></ulink></listitem>
  </itemizedlist>
  </sect2>
</sect1>
