<chapter id="introduction">
  <title>Introduction</title>
  <chapterinfo>
  <abstract>
<para>There are many ways to help spread the adoption of a technology, and to share skills and experience amongst a community of practitioners. Different approaches work well for communicating different kinds of knowledge. And we all individually have a preferred means of acquiring new skills, or getting help with a specific problem. Reference manuals, tutorials, recipes, best practice guides and experience reports all have their role. As do training courses, mentoring, pair programming and code reviews.</para>

<para>This book attempts to add to the steadily growing canon of reference documentation relating to Linked Data. Linked Data is a means of publishing "web-native" data using standards like HTTP, URIs and RDF. The book adopts a tried and tested means of communicating knowledge and experience in software development: the design pattern. The book is organized as a pattern catalogue that covers a range of different areas from the design of web scale identifiers through to application development patterns. The intent is to create a ready reference that will be useful for both the beginner and the experienced practioner alike. It's also intended to grow and mature in line with the practitioner community.</para>

  </abstract>
  </chapterinfo>

  <sect1 id="intro-overview"><title>Overview</title>

	<sect2>
		<title>Why A Pattern Catalogue?</title>

		<para>Design patterns have a number of benefits:</para>

		<itemizedlist>
		<listitem>Patterns have a well-defined structure that encourages focus on the essential knowledge being communicated. This makes them accessible and easy to consume.</listitem>
		<listitem>Patterns encourage discussion of related and complementary approaches. Design decisions are rarely clear cut. A focus on specifics is useful for understanding trade-offs</listitem>
		<listitem>Patterns provide a name for a particular design decision or solution. Collectively they build a lexicon that encourages clearer communication between practitioners</listitem>
		</itemizedlist>

		<para>The authors have successfully applied design patterns in their software development activities. The approach seemed well suited to teasing out some of the experiences and lessons they have learnt through working with Semantic Web technologies; the rigour of a pattern approach also helped the authoring.</para>

	</sect2>

	<sect2><title>...And Why a Book? Why Not a Blog or a Wiki?</title>

	<para>This is something that we wrestled with for a long time. Our goal is that this book should ultimately reflective the collective experience of the Linked Data community and we want to encourage participation and feedback. You can use the <ulink link="http://dataincubator.org">dataincubator.org</ulink> mailing list to discuss the book and debates its contents. We're also hoping to include your submissions, corrections and edits in the future. </para>
	<para>But while we want this book to grow as a participatory activity we (particularly Leigh) felt that an editorial layer would be a useful addition to this process. Helping firm up the naming, communication and organisation of the pattern catalogue as it develops.</para>
	<para>We also encourage the community, if they find a design pattern approach to be useful, to publish and share their own patterns using whatever mechanism feels right for them. A thousand flowers, etc.</para>
	</sect2>

	<sect2><title>What's Not Covered?</title>
        <para>This book isn't a primer on RDF or OWL. There are already plenty of good sources of introductory material on the technologies discussed here. The book makes the assumptions that you have some basic understanding of RDF, RDF Schema and possibly OWL. The examples are given in Turtle syntax, so you should be familiar with that syntax too.</para>
	<para>If you're looking for a deeper introduction to modelling with RDF Schema and OWL then you should read <ulink linkend="http://workingontologist.org/">Semantic Web for the Working Ontologist</ulink>. It's a great book that will give you a thorough understanding of how to apply the technologies. We're hoping that this work is in some sense a companion piece.</para>
        </sect2>
	<sect2>
		<title>How the Catalogue Is Organized</title>

		<para>The catalogue has been broken down into a number of separate chapters. Each chapter collects together patterns that have a common theme.</para>

		<itemizedlist>
		<listitem><xref linkend="identifier-patterns"/></listitem>
		<listitem><xref linkend="modelling-patterns"/></listitem>
		<listitem><xref linkend="publishing-patterns"/></listitem>
		<listitem><xref linkend="application-patterns"/></listitem>
		</itemizedlist>
	</sect2>

    <sect2>
		<title>Examples</title>

	<para>The pattern catalogue includes a number of examples. Snippets of code, data, or queries that help to illustrate a specific pattern. Code examples are shown in this font.</para>

	<para>Where we should examples of RDF data, we have used the <ulink link="http://www.w3.org/TeamSubmission/turtle/">Turtle</ulink> syntax for RDF because its more concise and readable than RDF/XML. We have preferred to use prefixed names for standard RDF properties and classes, but do not include the declarations of these prefixes in the examples.</para>

	<para>Unless otherwise stated, assume that when you're looking at some Turtle we've declared the following prefixes:</para>

<programlisting>
<![CDATA[
        @prefix ex: <http://www.example.org/>
	@prefix foaf: <http://xmlns.com/foaf/0.1/> .
	@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
	@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
	@prefix dcterms: <http://purl.org/dc/terms/> .
	@prefix dc: <http://purl.org/dc/elements/1.1/> .
	@prefix owl: <http://www.w3.org/2002/07/owl#> .
	@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
	@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
]]>
</programlisting>

	</sect2>

  </sect1>

</chapter>

