<sect1 id="materialize-inferences">
  <title>Materialize Inferences</title>
  <para> 
   <emphasis>How can data be published for use by clients with limited reasoning capabilities?</emphasis>
  </para>

  <sect2><title>Context</title>
  <para>Linked Data can be consumed by a wide variety of different client applications and libraries. Not all of these will have ready access to an RDFS or OWL reasoner, e.g. Javascript libraries running within a browser or mobile devices with limited processing power. How can a publisher provide access to data which can be inferred from the triples they are publishing?</para>
  </sect2>

  <sect2><title>Solution</title>
  <para>Publish both the original and some inferred (materialized) triples within the Linked Data.</para>
  </sect2>

  <sect2><title>Discussion</title>
  <para>Reasoners are not as widely deployed as client libraries for accessing RDF. Even as deployment spreads there will typically be processing or performance constraints that may limit the ability for a consuming application to perform reasoning over some retrieved data. By also publishing materialized triples a publisher can better support clients in consuming their data.</para>
  <para>Most commonly materialization of the inferred triples would happen through application of a reasoner to the publishers data. However a limited amount of materialized data can easily be included in Linked Data views through simple static publishing of the extra relations. E.g. by adding extra "redundant" statements in a template.</para>
  <para>There are a range of useful relationships that could be included when implementing this pattern:</para>
  <itemizedlist>
    <listitem>Typing, based on range and domains of properties and/or derived classes</listitem>
    <listitem>Super properties, based on property extensions</listitem>
    <listitem>Transitive relationships, e.g. <code>skos:broader</code> and <code>skos:narrower</code> relations</listitem>
    <listitem>Inverse properties</listitem>
  </itemizedlist>
  <para>Materialization may also be targetted in some way, e.g. to address specific application needs, rather than publish the full set of inferred relations. The specific materializations chosen can be based on expectations of common uses for the data. For example the publisher of a SKOS vocabulary may publish transitive relations between SKOS concepts, but opt not to include additional properties (e.g. that every <code>skos:prefLabel</code> is also
an <code>rdfs:label</code>)</para>
  <para>A reasonable rule of thumb approach to materializations would be to always include additional type or property relations whenever that would help ground the data in more commonly used vocabularies. Inverse and transitive relationships provide extra navigation options for Linked Data clients so are also worth considering.</para>
  <para>The downside to publishing of materialized triples is that there is no way for the consuming system to differentiate between the original and the inferred data. This limits the ability for the client to access only the raw data, e.g. in order to apply some local inferencing rules. This is an important consideration as publishers and consumers may have very different requirements. Clearly materializing triples also places additional burdens on the publisher.</para>
  <para>An alternative approach is to publish the materialized data in some other way, e.g. in a separate document(s) referenced by a <link linkend="see-also">See Also</link> link.</para>
  </sect2>

  <sect2><title>Further Reading</title>
  <itemizedlist>
  <listitem><ulink url="http://www.jenitennison.com/blog/node/139">Creating Linked Data - Part V: Finishing Touches</ulink> (see section on Derivable Data)</listitem>
  </itemizedlist>
  </sect2>
</sect1>
